# -*- coding: utf-8 -*-
"""fire.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uf4nzEbHUcOBHkf9c--4wRPqp_4MspKp
"""

import tensorflow as tf
import numpy as np
from tensorflow import keras
import os
import cv2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense
import matplotlib.pyplot as plt

!cp  '/content/drive/MyDrive/cnn/fire_detection.zip' '/content'

from google.colab import drive
drive.mount('/content/drive')

!unzip fire_detection.zip

train=ImageDataGenerator(rescale=1/255)
test=ImageDataGenerator(rescale=1/255)

train_dataset=train.flow_from_directory('/content/forest_fire/Training and Validation',
                                        target_size=(150,150),
                                        batch_size=32,
                                        class_mode='binary')
test_dataset=test.flow_from_directory('/content/forest_fire/Testing',
                                      target_size=(150,150),
                                      batch_size=32,
                                      class_mode='binary')

test_dataset.class_indices

model=keras.Sequential()
model.add(keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)))
model.add(keras.layers.MaxPool2D(2,2))
model.add(keras.layers.Conv2D(64,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))
model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))
model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(512,activation='relu'))
model.add(keras.layers.Dense(1,activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

r=model.fit(train_dataset,epochs=5,validation_data=test_dataset)

predictions=model.predict(test_dataset)
predictions=np.round(predictions)

predictions

print(len(predictions))

plt.plot(r.history['loss'],label='loss')
plt.plot(r.history['val_loss'],label='val_loss')
plt.legend()

plt.plot(r.history['accuracy'],label='acc')
plt.plot(r.history['val_accuracy'],label='val_acc')

def predictImage(filename):
  img1=image.load_img(filename,target_size=(150,150))
  plt.imshow(img1)
  y=image.img_to_array(img1)
  x=np.expand_dims(y,axis=0)
  val=model.predict(x)
  print(val)
  if val==1:
    plt.xlabel("no fire",fontsize=30)
  elif val==0:
    plt.xlabel("fire",fontsize=30)

predictImage('/content/Burnout_ops_on_Mangum_Fire_McCall_Smokejumpers.jpg')

predictImage('/content/istockphoto-1317323736-612x612.jpg')